{"version":3,"sources":["components/header.jsx","components/clockbody.jsx","components/footer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","className","ClockBody","alarm","useRef","useState","sessionLength","setSessionLength","breakLength","setBreakLength","remainingTime","setRemainingTime","isRunning","setIsRunning","mode","setMode","textColor","setTextColor","warning","setWarning","callback","delay","savedCallback","useEffect","current","tick","id","setInterval","clearInterval","useInterval","play","handleIncrement","event","target","value","handleDecrement","onClick","charAt","toUpperCase","slice","minutes","Math","floor","seconds","toString","timeDisplay","pause","currentTime","size","ref","src","type","Footer","Date","getFullYear","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAWeA,G,YATA,WACX,OACI,sBAAKC,UAAU,SAAf,UACI,oBAAIA,UAAU,eAAd,0BACA,oBAAIA,UAAU,qBAAd,6D,2BCyKGC,MA1KG,WAEd,IAAMC,EAAQC,mBAFM,EAIsBC,mBAAS,IAJ/B,mBAIbC,EAJa,KAIEC,EAJF,OAKkBF,mBAAS,GAL3B,mBAKbG,EALa,KAKAC,EALA,OAMsBJ,mBAAyB,GAAhBC,GAN/B,mBAMbI,EANa,KAMEC,EANF,OAOcN,oBAAS,GAPvB,mBAObO,EAPa,KAOFC,EAPE,OAQIR,mBAAS,WARb,mBAQbS,EARa,KAQPC,EARO,OAScV,mBAAS,QATvB,mBASbW,EATa,KASFC,EATE,OAUUZ,mBAAS,OAVnB,mBAUba,EAVa,KAUJC,EAVI,MAuJxB,SAAqBC,EAAUC,GAC3B,IAAMC,EAAgBlB,mBAEtBmB,qBAAU,WACND,EAAcE,QAAUJ,IACzB,CAACA,IAGJG,qBAAU,WACN,SAASE,IACLH,EAAcE,UAElB,GAAc,OAAVH,EAAgB,CAChB,IAAIK,EAAKC,YAAYF,EAAMJ,GAC3B,OAAO,kBAAMO,cAAcF,OAEhC,CAACL,IA3JJQ,EAAY,WACJjB,GAAaF,EAAgB,GAC7BC,EAAiBD,EAAe,GAEhCA,EAAgB,KAChBO,EAAa,SACbE,EAAW,OAEO,IAAlBT,IAoFJC,EAA0B,YAATG,EAAmC,GAAdN,EAAmC,GAAhBF,GACzDS,EAAiB,YAATD,EAAqB,QAAU,WAnFnCX,EAAMqB,QAAQM,OACdb,EAAa,QACbE,EAAW,UAEhBP,EAAY,IAAO,MAEtBW,qBAAU,WACNZ,EAAiBD,KACnB,CAACE,EAAWF,IAEd,IAAMqB,EAAkB,SAACC,GAChBpB,IAC0B,OAAvBoB,EAAMC,OAAOC,MACT5B,GAAiB,IACjBK,EAA0B,YAATG,EAA2C,IAArBR,EAAgB,GAAUI,GACjEH,EAAiBD,EAAgB,KAGjCK,EAA0B,YAATG,EAAqB,KAAUJ,GAChDH,EAAiB,KAGjBC,GAAe,IACfG,EAA0B,UAATG,EAAuC,IAAnBN,EAAc,GAAUE,GAC7DD,EAAeD,EAAc,KAE7BG,EAA0B,UAATG,EAAmB,KAAUJ,GAC9CD,EAAe,OAMzB0B,EAAkB,SAACH,GAChBpB,IAC0B,OAAvBoB,EAAMC,OAAOC,MACT5B,EAAgB,GAChBK,EAA0B,YAATG,EAA2C,IAArBR,EAAgB,GAAUI,GACjEH,EAAiBD,EAAgB,KAEjCK,EAA0B,YAATG,EAAqB,GAASJ,GAC/CH,EAAiB,IAGjBC,EAAc,GACdG,EAA0B,UAATG,EAAuC,IAAnBN,EAAc,GAAUE,GAC7DD,EAAeD,EAAc,KAE7BG,EAA0B,UAATG,EAAmB,GAASJ,GAC7CD,EAAe,MAsC/B,OACI,sBAAKR,UAAU,YAAf,UACI,sBAAKA,UAAU,qBAAf,UACI,sBAAKA,UAAU,WAAf,UACI,oBAAIyB,GAAG,gBAAgBzB,UAAU,QAAjC,4BACA,sBAAKA,UAAU,qBAAf,UACI,qBAAKyB,GAAG,iBAAiBzB,UAAU,kBAAnC,SACKK,IAED,sBAAKL,UAAU,iBAAf,UACA,wBAAQyB,GAAG,oBAAoBzB,UAAU,kBAAkBmC,QAASL,EAAiBG,MAAM,KAA3F,eACA,wBAAQR,GAAG,oBAAoBzB,UAAU,kBAAkBmC,QAASD,EAAiBD,MAAM,KAA3F,6BAIZ,sBAAKjC,UAAU,WAAf,UACI,oBAAIyB,GAAG,cAAczB,UAAU,QAA/B,0BACA,sBAAKA,UAAU,qBAAf,UACI,qBAAKyB,GAAG,eAAezB,UAAU,kBAAjC,SACKO,IAEL,sBAAKP,UAAU,iBAAf,UACI,wBAAQyB,GAAG,kBAAkBzB,UAAU,kBAAkBmC,QAASL,EAAiBG,MAAM,KAAzF,gBACA,wBAAQR,GAAG,kBAAkBzB,UAAU,kBAAkBmC,QAASD,EAAiBD,MAAM,KAAzF,gCAKhB,sBAAKjC,UAAU,eAAf,UACI,oBAAIyB,GAAG,cAAczB,UAAU,QAA/B,mBAA2Ca,EAAKuB,OAAO,GAAGC,eAA1D,OAA0ExB,EAAKyB,MAAM,MACrF,qBAAKb,GAAG,YAAYzB,UAAS,eAAUe,GAAvC,SA9DZ,WACI,IAAIwB,EAAUC,KAAKC,MAAMhC,EAAgB,IACrCiC,EAAUjC,EAA2B,GAAV8B,EAC/B,MAAM,GAAN,OAAUA,EAAU,GAAV,WAAmBA,EAAQI,YAAcJ,EAAQI,WAA3D,YAAyED,EAAU,GAAV,WAAoBA,EAASC,YAAgBD,EAASC,YA2DlEC,QAEzD,sBAAK5C,UAAU,aAAf,UACI,yBAAQyB,GAAG,aAAazB,UAAU,gBAAgBmC,QA3DtC,WAIhBvB,GAHCD,IA0DG,UAA4E,cAAC,IAAD,IAAU,cAAC,IAAD,OACtF,wBAAQc,GAAG,QAAQzB,UAAU,gBAAgBmC,QApDrC,WAChBvB,GAAa,GACbN,EAAiB,IACjBE,EAAe,GACfE,EAAiB,MACjBI,EAAQ,WACRE,EAAa,QACbE,EAAW,OACXhB,EAAMqB,QAAQsB,QACd3C,EAAMqB,QAAQuB,YAAc,GA2CpB,SAAmE,cAAC,IAAD,CAAcC,KAAM,UAE3F,sBAAM/C,UAAS,kBAAaiB,GAA5B,SAAuC,cAAC,IAAD,CAAmB8B,KAAM,OAChE,uBAAOtB,GAAG,OAAOuB,IAAK9C,EAAO+C,IAAI,+CAA+CC,KAAK,cC5IlFC,G,MATA,WACX,OACI,sBAAKnD,UAAU,SAAf,UACI,uBACA,uCAAW,IAAIoD,MAAOC,cAAtB,oB,kBCcGC,MAZf,WACE,OACE,sBAAKtD,UAAU,MAAf,UACE,cAAC,EAAD,IACA,qBAAKA,UAAU,WAAf,SACE,cAAC,EAAD,MAEF,cAAC,EAAD,QCHSuD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9989ed5d.chunk.js","sourcesContent":["import \"../styles/header.css\"\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"header\">\r\n            <h1 className=\"header-title\">25 + 5 Clock</h1>\r\n            <h3 className=\"header-description\">A freeCodeCamp Front End Libraries Project</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import {useState, useEffect, useRef} from \"react\"\r\nimport {FaPlay, FaPause, FaSkullCrossbones} from \"react-icons/fa\"\r\nimport {GrPowerReset} from \"react-icons/gr\"\r\nimport \"../styles/clockbody.css\"\r\n\r\nconst ClockBody = () => {\r\n    \r\n    const alarm = useRef()\r\n\r\n    const [sessionLength, setSessionLength] = useState(25)\r\n    const [breakLength, setBreakLength] = useState(5)\r\n    const [remainingTime, setRemainingTime] = useState(sessionLength * 60)\r\n    const [isRunning, setIsRunning] = useState(false)\r\n    const [mode, setMode] = useState(\"session\")\r\n    const [textColor, setTextColor] = useState(\"long\")\r\n    const [warning, setWarning] = useState(\"off\")\r\n\r\n    useInterval(() => {\r\n        if (isRunning && remainingTime > 0) {\r\n            setRemainingTime(remainingTime -1)    \r\n        }\r\n        if (remainingTime < 11) {\r\n            setTextColor(\"short\")\r\n            setWarning(\"on\")\r\n        }\r\n        if (remainingTime === 0) {\r\n            switchMode()\r\n            alarm.current.play()\r\n            setTextColor(\"long\")\r\n            setWarning(\"off\")\r\n        }   \r\n    }, isRunning ? 1000 : null)\r\n    \r\n    useEffect(() => {\r\n        setRemainingTime(remainingTime ) \r\n    },[isRunning, remainingTime])\r\n\r\n    const handleIncrement = (event) => {\r\n        if (!isRunning) {\r\n            if (event.target.value === \"s+\") {\r\n                if (sessionLength <= 59) {\r\n                    setRemainingTime(mode === \"session\" ? (sessionLength + 1) * 60 : remainingTime)\r\n                    setSessionLength(sessionLength + 1)\r\n                    \r\n                } else {\r\n                    setRemainingTime(mode === \"session\" ? 60 * 60 : remainingTime) \r\n                    setSessionLength(60) \r\n                }\r\n            } else  {\r\n                if (breakLength <= 59) {\r\n                    setRemainingTime(mode === \"break\" ? (breakLength + 1) * 60 : remainingTime)\r\n                    setBreakLength(breakLength + 1)\r\n                } else {\r\n                    setRemainingTime(mode === \"break\" ? 60 * 60 : remainingTime)\r\n                    setBreakLength(60)\r\n                }\r\n            }\r\n        }    \r\n    }\r\n\r\n    const handleDecrement = (event) => {\r\n        if (!isRunning) {\r\n            if (event.target.value === \"s-\") {\r\n                if (sessionLength > 1) {\r\n                    setRemainingTime(mode === \"session\" ? (sessionLength - 1) * 60 : remainingTime)\r\n                    setSessionLength(sessionLength - 1)\r\n                } else {\r\n                    setRemainingTime(mode === \"session\" ? 1 * 60 : remainingTime) \r\n                    setSessionLength(1)\r\n                }\r\n            } else {\r\n                if (breakLength > 1) {\r\n                    setRemainingTime(mode === \"break\" ? (breakLength - 1) * 60 : remainingTime)\r\n                    setBreakLength(breakLength - 1) \r\n                } else {\r\n                    setRemainingTime(mode === \"break\" ? 1 * 60 : remainingTime)\r\n                    setBreakLength(1)\r\n                }\r\n            }\r\n        }   \r\n    }\r\n\r\n    function timeDisplay() {\r\n        let minutes = Math.floor(remainingTime / 60)\r\n        let seconds = remainingTime - (minutes * 60)\r\n        return `${minutes < 10 ? `0${minutes.toString()}`: minutes.toString()}:${seconds < 10 ? `0${(seconds).toString()}` : (seconds).toString()}`\r\n    }\r\n\r\n    const handleCountdown = () => {\r\n        if (!isRunning) {\r\n            setIsRunning(true)\r\n        } else {\r\n            setIsRunning(false)\r\n        }\r\n    }\r\n\r\n    const handleReset = () => {\r\n        setIsRunning(false)\r\n        setSessionLength(25)\r\n        setBreakLength(5)\r\n        setRemainingTime(25 * 60)\r\n        setMode(\"session\")\r\n        setTextColor(\"long\")\r\n        setWarning(\"off\")\r\n        alarm.current.pause()\r\n        alarm.current.currentTime = 0\r\n    }\r\n\r\n    function switchMode() {\r\n        setRemainingTime(mode === \"session\" ? breakLength * 60 : sessionLength * 60)\r\n        setMode(mode === \"session\" ? \"break\" : \"session\")   \r\n    }\r\n\r\n    \r\n    return (\r\n        <div className=\"clockbody\">\r\n            <div className=\"settings-container\">\r\n                <div className=\"settings\">\r\n                    <h2 id=\"session-label\" className=\"label\">Session Length</h2>\r\n                    <div className=\"screen-and-buttons\">\r\n                        <div id=\"session-length\" className=\"settings-screen\">\r\n                            {sessionLength}\r\n                        </div>\r\n                            <div className=\"button-wrapper\">\r\n                            <button id=\"session-increment\" className=\"settings-button\" onClick={handleIncrement} value=\"s+\">&#43;</button>\r\n                            <button id=\"session-decrement\" className=\"settings-button\" onClick={handleDecrement} value=\"s-\">&minus;</button>\r\n                        </div>  \r\n                    </div>\r\n                </div>\r\n                <div className=\"settings\">\r\n                    <h2 id=\"break-label\" className=\"label\">Break Length</h2>\r\n                    <div className=\"screen-and-buttons\">\r\n                        <div id=\"break-length\" className=\"settings-screen\">\r\n                            {breakLength}\r\n                        </div>\r\n                        <div className=\"button-wrapper\">\r\n                            <button id=\"break-increment\" className=\"settings-button\" onClick={handleIncrement} value=\"b+\"> &#43;</button>\r\n                            <button id=\"break-decrement\" className=\"settings-button\" onClick={handleDecrement} value=\"b-\">&minus;</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"main-display\">\r\n                <h1 id=\"timer-label\" className=\"label\">{`${mode.charAt(0).toUpperCase()}${mode.slice(1)}`}</h1>\r\n                <div id=\"time-left\" className={`text-${textColor}`}>{timeDisplay()}</div>\r\n            </div>\r\n            <div className=\"start-stop\">\r\n                <button id=\"start_stop\" className=\"action-button\" onClick={handleCountdown}><FaPlay /><FaPause /></button>\r\n                <button id=\"reset\" className=\"action-button\" onClick={handleReset}><GrPowerReset size={20} /></button>\r\n            </div>\r\n            <span className={`warning-${warning}`}><FaSkullCrossbones size={30} /></span>\r\n            <audio id=\"beep\" ref={alarm} src=\"http://alienscollection.com/sounds/siren.wav\" type=\"audio\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction useInterval(callback, delay) {\r\n    const savedCallback = useRef()\r\n    \r\n    useEffect(() => {\r\n        savedCallback.current = callback\r\n    }, [callback])\r\n\r\n    \r\n    useEffect(() => {\r\n        function tick() {\r\n            savedCallback.current()\r\n        }\r\n        if (delay !== null) {\r\n            let id = setInterval(tick, delay)\r\n            return () => clearInterval(id)\r\n        }\r\n    }, [delay])\r\n}\r\n\r\nexport default ClockBody","import \"../styles/footer.css\"\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className=\"footer\">\r\n            <hr/>\r\n            <p>&copy; {new Date().getFullYear()}, willjw3</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","import Header from \"./components/header\"\nimport ClockBody from \"./components/clockbody\"\nimport Footer from \"./components/footer\"\nimport \"fontsource-courgette\"\nimport \"fontsource-share-tech-mono\"\nimport \"./styles/app.css\"\n\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Header />\n      <div className=\"app-main\">\n        <ClockBody />\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}